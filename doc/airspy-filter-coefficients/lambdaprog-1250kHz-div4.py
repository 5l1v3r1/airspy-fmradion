#!/usr/bin/env python3
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

# calculated by Twitter lambdaprog 
# /8 decimator LPF
# as the first-stage filter of /32 decimator

b = [
 0.000167223634636264,
 0.000027551101146017,
-0.001378303988768317,
-0.005408740169442248,
-0.012543460485155080,
-0.020712088221511341,
-0.024363124345677958,
-0.015648206458168671,
 0.011948528295791011,
 0.059000708872984725,
 0.117327789318493250,
 0.171381314496520470,
 0.204012335784630960,
 0.204012335784630960,
 0.171381314496520470,
 0.117327789318493250,
 0.059000708872984725,
 0.011948528295791011,
-0.015648206458168671,
-0.024363124345677958,
-0.020712088221511341,
-0.012543460485155080,
-0.005408740169442248,
-0.001378303988768317,
 0.000027551101146017,
 0.000167223634636264
 ]

f = 1250000
w, h = signal.freqz(b)
fig, ax1 = plt.subplots()
fs = f / (np.pi * 2.0)
ax1.set_title('Digital filter frequency response')
ax1.grid(True)
ax1.plot(w * fs, 20 * np.log10(abs(h)), 'b')
ax1.set_ylabel('Amplitude [dB]', color='b')
ax1.set_xlabel('Frequency [Hz]')
plt.show()
