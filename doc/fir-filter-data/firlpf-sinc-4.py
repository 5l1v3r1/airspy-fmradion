#!/usr/bin/env python3
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

# calculated by make_lanczos_coeff
# filter_order 32, cutoff = 0.45 / 4

b = [ -0.001171718351543, -0.002546017058194, -0.002092973794788, 0.001597323804162, 0.007695521693677, 0.012659213505685, 0.011673794128001, 0.001655512023717, -0.015696860849857, -0.032761398702860, -0.038028687238693, -0.020967304706573, 0.022333499044180, 0.085604451596737, 0.153104677796364, 0.204833641648293, 0.224214658141136, 0.204833641648293, 0.153104677796364, 0.085604451596737, 0.022333499044180, -0.020967304706573, -0.038028687238693, -0.032761398702860, -0.015696860849857, 0.001655512023717, 0.011673794128001, 0.012659213505685, 0.007695521693677, 0.001597323804162, -0.002092973794788, -0.002546017058194, -0.001171718351543]

# plot

w, h = signal.freqz(b)
fig, ax1 = plt.subplots()
ax1.set_title('Digital filter frequency response')
ax1.plot(w, 20 * np.log10(abs(h)), 'b')
ax1.set_ylabel('Amplitude [dB]', color='b')
ax1.set_xlabel('Frequency [rad/sample]')
plt.show()
