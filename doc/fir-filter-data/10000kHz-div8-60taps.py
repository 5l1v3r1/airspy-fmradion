#!/usr/bin/env python3
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

# calculated by Twitter lambdaprog 
# /8 decimator LPF
# as the first-stage filter of /32 decimator

b = [
 21.36119551337325360E-6,
 64.23297838960968420E-6,
 147.4309780416262750E-6,
 281.1816227538553220E-6,
 467.3621819016304360E-6,
 690.9131117885839330E-6,
 912.6022259135866080E-6,
 0.001064905900749416,
 0.001053704071445249,
 768.2512232475683050E-6,
 100.4505564551687370E-6,
-0.001027263006651787,
-0.002628756941039029,
-0.004621227226671674,
-0.006799707587161473,
-0.008826817472778139,
-0.010244146961255442,
-0.010509173606462658,
-0.009056901642605409,
-0.005380658161115998,
 878.4386044793103560E-6,
 0.009847415897955569,
 0.021358020576746649,
 0.034917771825172313,
 0.049725046668614013,
 0.064731024805009529,
 0.078743538633693072,
 0.090560404362423963,
 0.099113808552859561,
 0.103604374747559846,
 0.103604374747559846,
 0.099113808552859561,
 0.090560404362423963,
 0.078743538633693072,
 0.064731024805009529,
 0.049725046668614013,
 0.034917771825172313,
 0.021358020576746649,
 0.009847415897955569,
 878.4386044793103560E-6,
-0.005380658161115998,
-0.009056901642605409,
-0.010509173606462658,
-0.010244146961255442,
-0.008826817472778139,
-0.006799707587161473,
-0.004621227226671674,
-0.002628756941039029,
-0.001027263006651787,
 100.4505564551687370E-6,
 768.2512232475683050E-6,
 0.001053704071445249,
 0.001064905900749416,
 912.6022259135866080E-6,
 690.9131117885839330E-6,
 467.3621819016304360E-6,
 281.1816227538553220E-6,
 147.4309780416262750E-6,
 64.23297838960968420E-6,
 21.36119551337325360E-6
 ]

f = 10000000
w, h = signal.freqz(b)
fig, ax1 = plt.subplots()
fs = f / (np.pi * 2.0)
ax1.set_title('Digital filter frequency response')
ax1.grid(True)
ax1.plot(w * fs, 20 * np.log10(abs(h)), 'b')
ax1.set_ylabel('Amplitude [dB]', color='b')
ax1.set_xlabel('Frequency [Hz]')
plt.show()
