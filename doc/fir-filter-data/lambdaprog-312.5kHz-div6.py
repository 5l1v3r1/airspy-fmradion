#!/usr/bin/env python3
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

# calculated by Twitter lambdaprog 
# /8 decimator LPF
# as the first-stage filter of /32 decimator

b = [
-0.000860630933588917,
-0.003050795277726042,
-0.005943320911433466,
-0.010142573381842948,
-0.014056363709599496,
-0.016461572336684036,
-0.015073791400844071,
-0.008034820691387768,
 0.006090974591121192,
 0.027348642905534563,
 0.054263680136286130,
 0.083732123392162586,
 0.111577343554932620,
 0.133334905395817130,
 0.145276727424468840,
 0.145276727424468840,
 0.133334905395817130,
 0.111577343554932620,
 0.083732123392162586,
 0.054263680136286130,
 0.027348642905534563,
 0.006090974591121192,
-0.008034820691387768,
-0.015073791400844071,
-0.016461572336684036,
-0.014056363709599496,
-0.010142573381842948,
-0.005943320911433466,
-0.003050795277726042,
-0.000860630933588917
 ]

w, h = signal.freqz(b)
fig, ax1 = plt.subplots()
ax1.set_title('Digital filter frequency response')
ax1.plot(w, 20 * np.log10(abs(h)), 'b')
ax1.set_ylabel('Amplitude [dB]', color='b')
ax1.set_xlabel('Frequency [rad/sample]')
plt.show()
