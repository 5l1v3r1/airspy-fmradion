#!/usr/bin/env python3
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

# calculated by Twitter lambdaprog 
# /8 decimator LPF
# as the first-stage filter of /32 decimator

b = [
 0.000163684682470875,
 0.000772584837442848,
 0.002021239686872703,
 0.004435627121249832,
 0.008375401475660970,
 0.014239715819450282,
 0.022188299353843657,
 0.032132032467856633,
 0.043618498598846187,
 0.055856224488393495,
 0.067771123204540540,
 0.078156099008024574,
 0.085853232693530845,
 0.089952397742173520,
 0.089952397742173520,
 0.085853232693530845,
 0.078156099008024574,
 0.067771123204540540,
 0.055856224488393495,
 0.043618498598846187,
 0.032132032467856633,
 0.022188299353843657,
 0.014239715819450282,
 0.008375401475660970,
 0.004435627121249832,
 0.002021239686872703,
 0.000772584837442848,
 0.000163684682470875
 ]

w, h = signal.freqz(b)
fig, ax1 = plt.subplots()
ax1.set_title('Digital filter frequency response')
ax1.plot(w, 20 * np.log10(abs(h)), 'b')
ax1.set_ylabel('Amplitude [dB]', color='b')
ax1.set_xlabel('Frequency [rad/sample]')
plt.show()
